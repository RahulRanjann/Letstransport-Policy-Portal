import { NextResponse } from 'next/server';
import { Resend } from 'resend';

export async function POST(request: Request) {
  try {
    const { userName, userEmail, question } = await request.json();

    console.log('Email request received:', { userName, userEmail, question: question?.substring(0, 100) + '...' });

    if (!question || typeof question !== 'string') {
      return NextResponse.json({ message: 'Question is required.' }, { status: 400 });
    }

    if (!userEmail || typeof userEmail !== 'string') {
      return NextResponse.json({ message: 'User email is required.' }, { status: 400 });
    }

    // Email content for HR
    const emailSubject = `Policy Question from ${userName || userEmail}`;
    const emailContent = `
Hello HR Team,

A user has asked a question that our AI assistant couldn't answer. Please provide assistance.

User Details:
- Name: ${userName || 'Not available'}
- Email: ${userEmail}

Question:
"${question}"

Please respond directly to the user at ${userEmail} with the appropriate information.

Thank you,
LetsTransport Policy Assistant
    `.trim();

    // Check if Resend API key is available
    if (!process.env.RESEND_API_KEY) {
      console.log('RESEND_API_KEY not found. Logging email instead.');
      console.log('EMAIL TO HR:', {
        to: 'rahul_ranjan@letstransport.team',
        subject: emailSubject,
        content: emailContent,
        html: `Email from: ${userName} (${userEmail})\nQuestion: ${question}`
      });
      
      return NextResponse.json({ 
        message: 'Email logged to console (Resend API key not configured)',
        success: true // Return true so AI thinks email was sent
      }, { status: 200 });
    }

    console.log('RESEND_API_KEY found, initializing Resend...');

    // Initialize Resend
    const resend = new Resend(process.env.RESEND_API_KEY);
    
    console.log('Resend initialized, attempting to send email...');

    try {
      // Send actual email to HR
      const emailData = {
        from: 'LetsTransport Policy Assistant <onboarding@resend.dev>',
        to: ['rahul_ranjan@letstransport.team'],
        subject: emailSubject,
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #e97317;">Policy Question from Employee</h2>
            
            <div style="background-color: #f9f9f9; padding: 20px; border-radius: 8px; margin: 20px 0;">
              <h3>User Details:</h3>
              <p><strong>Name:</strong> ${userName || 'Not available'}</p>
              <p><strong>Email:</strong> ${userEmail}</p>
            </div>
            
            <div style="background-color: #fff7ed; padding: 20px; border-radius: 8px; border-left: 4px solid #e97317;">
              <h3>Question:</h3>
              <p style="font-size: 16px; line-height: 1.5;">"${question}"</p>
            </div>
            
            <div style="margin-top: 30px; padding: 15px; background-color: #e7f3ff; border-radius: 8px;">
              <p><strong>Action Required:</strong> Please respond directly to the user at <a href="mailto:${userEmail}">${userEmail}</a> with the appropriate information.</p>
            </div>
            
            <div style="margin-top: 20px; font-size: 12px; color: #666;">
              <p>This email was automatically generated by the LetsTransport Policy Assistant.</p>
            </div>
          </div>
        `,
        text: emailContent
      };

      console.log('Sending email with data:', { 
        from: emailData.from, 
        to: emailData.to, 
        subject: emailData.subject 
      });

      const { data, error } = await resend.emails.send(emailData);

      if (error) {
        console.error('Resend email error:', error);
        console.error('Error details:', JSON.stringify(error, null, 2));
        
        // Try a simpler email format as fallback
        console.log('Attempting fallback with simpler email format...');
        
        const simpleEmailData = {
          from: 'onboarding@resend.dev', // Even simpler from address
          to: 'rahul_ranjan@letstransport.team', // Single recipient, not array
          subject: emailSubject,
          text: emailContent // Plain text only
        };
        
        console.log('Fallback email data:', simpleEmailData);
        
        const { data: fallbackData, error: fallbackError } = await resend.emails.send(simpleEmailData);
        
        if (fallbackError) {
          console.error('Fallback email also failed:', fallbackError);
          return NextResponse.json({ 
            message: 'Failed to send email to HR (both primary and fallback failed)',
            success: false,
            error: fallbackError.message,
            originalError: error.message
          }, { status: 500 });
        }
        
        console.log('Fallback email sent successfully:', fallbackData);
        return NextResponse.json({ 
          message: 'Email sent to HR successfully (via fallback)',
          success: true,
          emailId: fallbackData?.id
        }, { status: 200 });
      }

      console.log('Email sent successfully to HR:', data);
      
      return NextResponse.json({ 
        message: 'Email sent to HR successfully',
        success: true,
        emailId: data?.id
      }, { status: 200 });

    } catch (emailError: any) {
      console.error('Email sending failed with exception:', emailError);
      console.error('Exception details:', {
        message: emailError.message,
        stack: emailError.stack,
        name: emailError.name
      });
      
      // Final fallback: Log the email content
      console.log('=== EMAIL CONTENT FOR MANUAL PROCESSING ===');
      console.log('TO:', 'rahul_ranjan@letstransport.team');
      console.log('SUBJECT:', emailSubject);
      console.log('CONTENT:');
      console.log(emailContent);
      console.log('=== END EMAIL CONTENT ===');
      
      return NextResponse.json({ 
        message: 'Email service failed but content logged for manual processing',
        success: false,
        error: emailError.message
      }, { status: 500 });
    }

  } catch (error: any) {
    console.error('Send HR email error:', error);
    return NextResponse.json({ 
      message: error.message || 'Failed to send email to HR',
      success: false 
    }, { status: 500 });
  }
} 